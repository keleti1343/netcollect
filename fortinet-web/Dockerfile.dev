# Development Dockerfile for Next.js application
FROM node:18-alpine AS base

# Install dependencies for development
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./

# Check for package-lock.json synchronization and handle accordingly
RUN \
  if [ -f package-lock.json ]; then \
    echo "Checking package-lock.json synchronization..."; \
    if npm ci --dry-run 2>/dev/null; then \
      echo "Package-lock.json is synchronized, using npm ci"; \
      npm ci; \
    else \
      echo "Package-lock.json is out of sync with package.json"; \
      echo "This often happens after version changes. Regenerating lock file..."; \
      rm package-lock.json; \
      npm install --package-lock-only; \
      npm ci; \
    fi; \
  else \
    echo "No package-lock.json found, running npm install"; \
    npm install; \
  fi

# Development image
FROM base AS development
WORKDIR /app

# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Set development environment
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Expose port
EXPOSE 3000

# Health check for development
HEALTHCHECK --interval=30s --timeout=30s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1

# Start development server with hot reload
CMD ["npm", "run", "dev"]