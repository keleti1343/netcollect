# Map ALLOWED_DOMAINS to a variable for reuse
map $host $allowed_host {
    default 0;
    ${ALLOWED_DOMAINS_MAP}
}
 
# Detect internal container requests (Docker network IPs)
map $remote_addr $is_internal_request {
    default 0;
    "~^172\." 1;  # Docker default network
    "~^192\.168\." 1;  # Alternative Docker network
    "~^10\." 1;  # Alternative Docker network
}

# Combined check: Either allowed domain OR internal request
map "$allowed_host:$is_internal_request" $allow_request {
    default 0;
    "0:0" 0;  # Not allowed domain and not internal
    "0:1" 1;  # Not allowed domain but is internal request
    "1:0" 1;  # Allowed domain but not internal
    "1:1" 1;  # Both allowed domain and internal
}
# Main application server - DYNAMIC CONFIGURATION
server {
    listen 80;
    server_name ${ALLOWED_DOMAINS};
    
    # Create variable to detect internal container traffic
    set $internal_request 0;
    
    # Mark as internal if request comes from Docker network (typically 172.x.x.x)
    if ($remote_addr ~ "^172\.") {
        set $internal_request 1;
    }
    
    # Block non-allowed domains (444 = No Response) but allow internal container requests
    if ($allowed_host = 0) {
        # Only block if not an internal request
        if ($internal_request = 0) {
            return 444;
        }
    }

    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    #{{ if $NGINX_SSL_ENABLED }}
    #return 301 https://$host$request_uri;
    #{{ end }}

    # Connection limits - DYNAMIC: $NGINX_CONNECTION_LIMIT connections per IP
    limit_conn conn_limit_per_ip $NGINX_CONNECTION_LIMIT;

    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Health check endpoint - DYNAMIC RATE LIMITING
    # Rate: $NGINX_HEALTH_RATE_LIMIT r/m (${NGINX_HEALTH_RATE_LIMIT_NUMERIC}r/s), Burst: $NGINX_HEALTH_BURST
    location /health {
        limit_req zone=health burst=$NGINX_HEALTH_BURST nodelay;
        add_header Content-Type "text/plain" always;
        return 200 "nginx healthy\n";
    }

    # API routes with DYNAMIC rate limiting
    # Rate: $NGINX_API_RATE_LIMIT r/m (${NGINX_API_RATE_LIMIT_NUMERIC}r/s), Burst: $NGINX_API_BURST, Delay: $NGINX_API_DELAY
    location /api/ {
        # Rate limiting with burst and delay - ALL DYNAMIC
        limit_req zone=api burst=$NGINX_API_BURST delay=$NGINX_API_DELAY;
        limit_req_status 429;
        
        # Custom error page for rate limiting
        error_page 429 /rate-limit-error.html;
        
        # Proxy settings with keepalive
        proxy_pass http://fortinet_api;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Connection stability
        proxy_ignore_client_abort on;
        proxy_socket_keepalive on;
        
        # Enhanced timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Enhanced buffer settings
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 16 8k;
        proxy_busy_buffers_size 16k;
    }

    # Web application routes with DYNAMIC rate limiting
    # Rate: $NGINX_WEB_RATE_LIMIT r/m (${NGINX_WEB_RATE_LIMIT_NUMERIC}r/s), Burst: $NGINX_WEB_BURST, Delay: $NGINX_WEB_DELAY
    location / {
        limit_req zone=web burst=$NGINX_WEB_BURST delay=$NGINX_WEB_DELAY;
        limit_req_status 429;
        
        error_page 429 /rate-limit-error.html;
        
        proxy_pass http://fortinet_web;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Connection stability
        proxy_ignore_client_abort on;
        proxy_socket_keepalive on;
        
        # Enhanced timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Enhanced buffer settings
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 16 8k;
        proxy_busy_buffers_size 16k;
    }

    # Rate limit error page
    location = /rate-limit-error.html {
        root /usr/share/nginx/html;
        internal;
    }

    # Security: Block common attack patterns
    location ~ /\. {
        deny all;
    }
    
    location ~ \.(env|git|svn) {
        deny all;
    }

    # Static assets caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        try_files $uri @static_proxy;
        expires 1y;
        add_header Cache-Control "public, immutable" always;
        access_log off;
    }

    # Named location for static asset proxy fallback
    location @static_proxy {
        proxy_pass http://fortinet_web;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Connection stability
        proxy_ignore_client_abort on;
        proxy_socket_keepalive on;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# SSL configuration (for production with certificates) - DYNAMIC CONFIGURATION
# Uncomment and configure when SSL is needed
server {
    listen 443 ssl;
    server_name ${ALLOWED_DOMAINS};

    # Block non-allowed SSL domains
    if ($allowed_host = 0) {
        return 444;
    }

    # SSL cert paths (certbot will use first domain)
    ssl_certificate /etc/letsencrypt/live/${NGINX_HOST}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${NGINX_HOST}/privkey.pem;
#
#     # Enhanced SSL Security Settings - DYNAMIC
     ssl_protocols ${NGINX_SSL_PROTOCOLS};
     ssl_ciphers '${NGINX_SSL_CIPHERS}';
     ssl_prefer_server_ciphers ${NGINX_SSL_PREFER_SERVER_CIPHERS};

#     # SSL Session Configuration - DYNAMIC
     ssl_session_cache ${NGINX_SSL_SESSION_CACHE};
     ssl_session_timeout ${NGINX_SSL_SESSION_TIMEOUT};
     ssl_session_tickets off;
#
#     # Additional SSL Security Headers
     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
     add_header X-Frame-Options "DENY" always;
     add_header X-Content-Type-Options "nosniff" always;
     add_header X-XSS-Protection "1; mode=block" always;
     add_header Referrer-Policy "strict-origin-when-cross-origin" always;

#     # SSL Stapling
     ssl_stapling on;
     ssl_stapling_verify on;
     resolver 8.8.8.8 8.8.4.4 valid=300s;
     resolver_timeout 5s;
#
#     # Connection limits - DYNAMIC: $NGINX_CONNECTION_LIMIT connections per IP
     limit_conn conn_limit_per_ip $NGINX_CONNECTION_LIMIT;
#
#     # Health check endpoint - DYNAMIC RATE LIMITING
     location /health {
         limit_req zone=health burst=$NGINX_HEALTH_BURST nodelay;
         add_header Content-Type "text/plain" always;
         return 200 "nginx healthy (SSL)\n";
     }
#
#     # API routes with DYNAMIC rate limiting
     location /api/ {
         limit_req zone=api burst=$NGINX_API_BURST delay=$NGINX_API_DELAY;
         limit_req_status 429;
         error_page 429 /rate-limit-error.html;

         proxy_pass http://fortinet_api;
         proxy_http_version 1.1;
         proxy_set_header Connection "";
         proxy_set_header Host $host;
         proxy_set_header X-Real-IP $remote_addr;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header X-Forwarded-Proto $scheme;
#
         proxy_connect_timeout 30s;
         proxy_send_timeout 30s;
         proxy_read_timeout 30s;
#
         proxy_buffering on;
         proxy_buffer_size 4k;
         proxy_buffers 8 4k;
     }
#
#     # Web application routes with DYNAMIC rate limiting
     location / {
         limit_req zone=web burst=$NGINX_WEB_BURST delay=$NGINX_WEB_DELAY;
         limit_req_status 429;
         error_page 429 /rate-limit-error.html;
#
         proxy_pass http://fortinet_web;
         proxy_http_version 1.1;
         proxy_set_header Connection "";
         proxy_set_header Host $host;
         proxy_set_header X-Real-IP $remote_addr;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header X-Forwarded-Proto $scheme;
#
         proxy_connect_timeout 30s;
         proxy_send_timeout 30s;
         proxy_read_timeout 30s;
#
         proxy_buffering on;
         proxy_buffer_size 4k;
         proxy_buffers 8 4k;
     }
#
#     # Rate limit error page
     location = /rate-limit-error.html {
         root /usr/share/nginx/html;
         internal;
     }

#     # Security: Block common attack patterns
     location ~ /\. {
         deny all;
     }
#
     location ~ \.(env|git|svn) {
         deny all;
     }
#
#     # Static assets caching
     location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
         try_files $uri @static_proxy;
         expires 1y;
         add_header Cache-Control "public, immutable" always;
         access_log off;
     }
#
#     # Named location for static asset proxy fallback
     location @static_proxy {
         proxy_pass http://fortinet_web;
         proxy_http_version 1.1;
         proxy_set_header Connection "";
         proxy_set_header Host $host;
         proxy_set_header X-Real-IP $remote_addr;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header X-Forwarded-Proto $scheme;
     }
#
#     # Error pages
     error_page 404 /404.html;
     error_page 500 502 503 504 /50x.html;
#
     location = /50x.html {
         root /usr/share/nginx/html;
     }
 }
